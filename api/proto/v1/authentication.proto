syntax = "proto3";
package vjftw.dockerregistryproxy.v1;

option go_package = "v1";

import "google/protobuf/empty.proto";

// AuthenticationVerifier represents a service that the Docker Registry
// Proxy uses to authenticate a request with.
service AuthenticationVerifier {
  // Verify takes the raw Base64 encoded BasicAuth credential supplied to
  // the Docker Registry Proxy from the Docker client and authenticates
  // with the implementation.
  rpc Verify(VerifyRequest) returns (google.protobuf.Empty);
}

service Configuration {
  // GetConfigurationSchema returns the schema for the plugin
  rpc GetConfigurationSchema(google.protobuf.Empty)
      returns (ConfigurationSchema);
  // Configure configures the plugin
  rpc Configure(ConfigureRequest) returns (google.protobuf.Empty);
}

// VerifyRequest represents a message for an AuthenticationVerifier to verify.
message VerifyRequest {
  // username represents the username portion of the basic auth received from
  // the docker client.
  string username = 1;
  // password represents the password portion of the basic auth received from
  // the docker client.
  string password = 2;
  // host represents the host of the image that the docker client is attempting
  // to pull. e.g. docker-proxy.example.org
  string host = 3;
  // repository represents the repository of the image that the docker client is
  // attempting to pull. e.g. my-repository
  string repository = 4;
  // image represents the image that the docker client is attempting to pull.
  // e.g. my-image:latest or my-image@sha256:digest
  string image = 5;
}

// AuthenticationProvider represents a service that provides authentication
// credentials. This is used by the Kubelet Image Service.
service AuthenticationProvider {
  rpc Provide(ProvideRequest) returns (ProvideResponse);
}

// ProvideRequest represents a message for an AuthenticationProvider to return
// credentials for.
message ProvideRequest {
  // host represents the host of the image that the docker client is attempting
  // to pull. e.g. docker-proxy.example.org
  string host = 1;
  // repository represents the repository of the image that the docker client is
  // attempting to pull. e.g. my-repository
  string repository = 2;
  // image represents the image that the docker client is attempting to pull.
  // e.g. my-image:latest or my-image@sha256:digest
  string image = 3;
}

// ProvideResponse represents the returned credentials.
message ProvideResponse {
  // Inlined what we use from github.com/cli/cli/config/types
  string username = 1;
  string password = 2;
  string auth = 3;
  // IdentityToken is used to authenticate the user and get
  // an access token for the registry.
  string identity_token = 4;
  // RegistryToken is a bearer token to be sent to a registry
  string registry_token = 5;
}

// ConfigurationSchema represents the configuration for a plugin.
message ConfigurationSchema {
  // key is attribute name
  map<string, ConfigurationAttribute> attributes = 1;
}

// ConfigType represents the available field types from:
// https://github.com/spf13/viper#getting-values-from-viper
enum ConfigType {
  BOOL = 0;
  FLOAT64 = 1;
  INT = 2;
  INT_SLICE = 3;
  STRING = 4;
  STRING_MAP = 5;
  STRING_SLICE = 6;
  TIME = 7;
  DURATION = 8;
}

message ConfigurationAttribute {
  ConfigType attribute_type = 1;
  string description = 2;
}

message ConfigurationAttributeValue {
  ConfigType attribute_type = 1;
  bytes value = 2;
}

message ConfigureRequest {
  map<string, ConfigurationAttributeValue> attributes = 1;
}
